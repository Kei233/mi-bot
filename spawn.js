const { crearCriatura, cargarCriaturas, guardarCriaturas } = require('./RPG/criaturas.js');
const { generarArmaAleatoria } = require('./RPG/combate.cjs');

// Define un valor de probabilidad inicial por defecto
const PROBABILIDAD_INICIAL = 45;

async function spawnC(usuario, chat, mundo) {

    // Inicializar el contador de spawn si no existe
    if (!usuario.contadorSpawn) {
        usuario.contadorSpawn = 0;
    }

    if(chat != '120363385970988223@g.us' || chat != '120363395447611444@g.us'){
        console.log("No es el grupo indicado.");
        return false;
    }

    const probabilidadReducida = PROBABILIDAD_INICIAL - (usuario.contadorSpawn * 5);
    const probabilidad = Math.floor(Math.random() * 100) - mundo.aumento;

    const rangos = {
        E: [
            "Limo", "Murci√©lago cavernario", "Rata gigante", "Escarabajo del pantano",
            "Ara√±a gigante", "Cuervo sombr√≠o", "Le√≥n salvaje", "Pez mordedor",
            "Lagarto inofensivo", "Zombi lento", "Cadaver Putrefacto"
        ],
        C: [
            "Goblin saqueador", "Lobo gris", "Esqueleto guerrero", "Planta carn√≠vora",
            "Orc lanza", "Gnomo vengativo", "Salamandra del fuego", "Mimic",
            "Kobold minero", "Ojo flotante"
        ],
        D: [
            "Troll de cueva", "Elemental menor de tierra", "Mant√≠cora joven", "Ogro del pantano",
            "Drag√≥n pseudo", "Lobo espectral", "Vampiro novato", "Bestia cristalina",
            "Hombre serpiente", "Escorpi√≥n gigante"
        ],
        B: [
            "Golem de piedra", "Elemental de fuego", "Minotauro de batalla", "Espectro vengativo",
            "Hidra de dos cabezas", "√Åguila de tormenta", "Drag√≥n menor", "Lic√°ntropo alfa",
            "Jabal√≠ demon√≠aco", "Arp√≠a"
        ],
        A: [
            "Quimera", "F√©nix menor", "Drag√≥n anciano", "Demonio de sangre",
            "Gigante de guerra", "Serpiente marina", "Vampiro maestro", "Behemoth",
            "√Ångel ca√≠do", "Le√≥n celestial"
        ],
        S: [
            "Tit√°n de la tormenta", "Drag√≥n del apocalipsis", "Leviat√°n", "F√©nix ancestral",
            "Lich eterno", "Kraken de las profundidades", "Devorador de mundos",
            "Dios de la muerte menor", "Avatar del caos", "Rey demonio"
        ],
        SS: [
            "Drag√≥n celestial", "Ser infinito", "Dios drag√≥n", "Entidad c√≥smica",
            "√Ångel de la destrucci√≥n", "Tit√°n primordial", "Emperador demon√≠aco",
            "Destructor de realidades", "F√©nix c√≥smico", "Heraldo del fin"
        ]
    };

    // Definir rangos y sus probabilidades
    const rangosProbabilidad = [
        { rango: 'E', min: 0, max: 20 },
        { rango: 'C', min: 21, max: 30 },
        { rango: 'D', min: 31, max: 35 },
        { rango: 'B', min: 36, max: 38 },
        { rango: 'A', min: 39, max: 42 },
        { rango: 'S', min: 43, max: 44 },
        { rango: 'SS', min: 45, max: 45 } // Solo ocurre en una probabilidad exacta
    ];

    if ((usuario.spawn && probabilidad < probabilidadReducida) || probabilidad === 45) {
        // Determinar el rango seg√∫n la probabilidad
        const rangoSeleccionado = rangosProbabilidad.find(rango => probabilidad >= rango.min && probabilidad <= rango.max);
        if (rangoSeleccionado) {
            const nombres = rangos[rangoSeleccionado.rango];
            const index = Math.floor(Math.random() * nombres.length);

            // Incrementar el contador del usuario
            if(!usuario.contadorSpawn){
                usuario.contadorSpawn = 0;
            }

            usuario.contadorSpawn++;

            // Crear la criatura con una propiedad boolean para identificar que est√° viva
            const criatura = crearCriatura(nombres[index], rangoSeleccionado.rango);
            if(!criatura.spawneada){
            criatura.spawneada = true;
            }

            if(!criatura.armaPrincipal){

                criatura.armaPrincipal = generarArmaAleatoria(criatura);
            }

            return criatura;
        }
    }

    return false;
}

async function generarMision(usuario, chat, mundo) {
    try {
      // Inicializamos el contador de spawn del usuario si no existe
      if (!usuario.contadorSpawn) {
        usuario.contadorSpawn = 0;
      }
  
      // Cargamos la lista actual de criaturas
      const criaturas = cargarCriaturas();
  
      // Definici√≥n de los rangos y sus respectivas criaturas
      const rangos = {
        E: [
          "Limo",
          "Murci√©lago cavernario",
          "Rata gigante",
          "Escarabajo del pantano",
          "Ara√±a gigante",
          "Lodo animado", 
          "Ciempi√©s venenoso", 
          "Rana espinosa", 
          "Sapo aberrante", 
          "Escorpi√≥n monstruoso", 
          "Cucaracha colosal", 
          "Hormiga asesina", 
          "Topo sombr√≠o", 
          "Gusano abisal", 
          "Caracol parasitario", 
          "Murci√©lago f√©tido", 
          "Centolla descomunal", 
          "Serpiente terrenal", 
          "Buitre necr√≥fago",
           "Rata sombr√≠a"
        ],
        D: [
          "Goblin saqueador",
          "Lobo gris",
          "Esqueleto guerrero",
          "Planta carn√≠vora",
          "Mimic"
        ],
        C: [
          "Troll de cueva",
          "Elemental menor de tierra",
          "Mant√≠cora joven",
          "Ogro del pantano",
          "Lobo espectral"
        ],
        B: [
          "Golem de piedra",
          "Elemental de fuego",
          "Minotauro de batalla",
          "Espectro vengativo",
          "Hidra de dos cabezas"
        ]
      };
  
      // Seleccionamos aleatoriamente el rango principal entre "C" y "D"
      const rangosPrincipales = ["C", "D"];
      const rangoPrincipal =
        rangosPrincipales[Math.floor(Math.random() * rangosPrincipales.length)];
      const criaturaPrincipalNombre =
        rangos[rangoPrincipal][Math.floor(Math.random() * rangos[rangoPrincipal].length)];
      const idRango = rangoPrincipal === "C" ? 2 : 1;
  
      // Creamos la criatura principal
      const criaturaPrincipal = crearCriatura(criaturaPrincipalNombre, rangoPrincipal);
      criaturaPrincipal.spawneada = true;
      console.log("ID de la criatura principal:", criaturaPrincipal.idRango, idRango);
      criaturaPrincipal.armaPrincipal = generarArmaAleatoria(
        idRango,
        rangoPrincipal,
        false,
        null,
        false
      );
      criaturaPrincipal.subditos = [];
  
      console.log("Criatura principal creada.");

      const cantidadSecundarias = Math.floor(Math.random() * 3) + 1;
      const rangoSecundario = "E";
      const criaturasSecundarias = [];

      console.log("Punto de control 1.");
  
      // Creamos las criaturas secundarias
      for(let i = 0; i < cantidadSecundarias; i++) {
        console.log("Entrando al bucle...");
        const criaturaNombre = rangos[rangoSecundario][Math.floor(Math.random() * rangos[rangoSecundario].length)];
        const criatura = crearCriatura(criaturaNombre, rangoSecundario);
        if (criatura === "existe") {
          i--;
          continue;
        }
  
        console.log("Punto de control 2.");
  
        criatura.spawneada = true;
        criaturasSecundarias.push(criatura);
        criaturaPrincipal.subditos.push(criatura.nombre);
      }
  
      // Agregamos la criatura principal y sus subordinados a la lista
      criaturas.push(criaturaPrincipal, ...criaturasSecundarias);
      guardarCriaturas(criaturas);
  
      console.log("Punto de control antes de retornar.");
  
      // Construimos el mensaje de misi√≥n
      const mensaje = `_üìú *Misi√≥n Disponible* üìú_\n\n` +
        `_üéØ *Objetivo Principal:* ${criaturaPrincipalNombre} (${rangoPrincipal})_\n\n` +
        `‚öîÔ∏è *Criaturas Subditos:* ${criaturasSecundarias
          .map(c => `_${c.nombre} (${c.rango})_`)
          .join(", ")}\n\n` +
        `_¬°Prep√°rate para la batalla!_`;
  
      return {
        mensaje,
        criaturaPrincipal,
        criaturasSecundarias
      };
    } catch (error) {
      console.log("Error al generar misiones:", error.stack, error);
    }
  }
  

module.exports = { spawnC, generarMision };